<g>
<pname>
100
</pname>
<ques>
Problem Statement :

	Your program should sort an array of strings of elements by the length of the elements, longest to shortest.  If multiple Strings have the same length, their relative order in the output should be the same as their relative order in the input.
	The first input will be the number of strings 'n' followed by n strings.
Your output should be the n strings in the order mentioned above.
 
Constraints: 

1) n will be between 1 and 50 elements, inclusive.
2) Each string will between 1 and 50 characters in length, inclusive. 
3) Strings contain only letters(small and Capital) and numbers.

TimeLimit: 200 ms
 
Examples: 
 
1)

Input: 

6
Top
Coder
comp
Wedn
at
midnight
 
Output:

midnight
Coder
comp
Wedn
Top
at 
 
(2)

Input:

3
one
three
five
 
Output:

three
five
one 
 
<Source www.topcoder.com>
</ques>
<code>
#include <iostream> 

using namespace std; 
 
void Sort(int* len,char** s,int size) 
{ 
    for(int i=0;i<size-1;i++) 
    { 
        for(int j=0;j<size-i-1;j++) 
        { 
                if(len[j+1]>len[j]) 
                { 
                    int temp = len[j]; 
                    len[j]=len[j+1]; 
                    len[j+1]=temp; 
                    char* t = s[j]; 
                    s[j] = s[j+1]; 
                    s[j+1] = t; 
                } 
        } 
    } 
} 
int main() 
{ 
    int n; 
    cin>>n; 
    char** s = new (char*)[n]; 
    int* len = new int[n]; 
    for(int i=0;i<n;i++) 
    { 
        char* temp= new char[51]; 
        cin>>temp; 
        s[i]=temp; 
        len[i] = strlen(s[i]); 
    } 
    Sort(len,s,n); 
     
    for(int i=0;i<n;i++) 
    { 
        cout<<s[i]<<endl; 
    } 
       return 0; 
 
} 
/* 
 
I:{7,"all", "is", "beyond", "the", "edge", "of", "time"} 
O:{"beyond", "edge", "time", "all", "the", "is", "of"}  	 	Passed  	 
 
I:{7,"space", "is", "a", "legend", "of", "final", "import"} 
O:{"legend", "import", "space", "final", "is", "of", "a"} 		Passed 	 
 
I:{1,"x"} 
O:{"x"} 		Passed 	 
 
I:{4,"j", "j", "j", "jj"} 
O:{"jj", "j", "j", "j"} 		Passed 	 
 
I:{5,"and", "now", "our", "feature", "presentation"} 
O:{"presentation", "feature", "and", "now", "our"} 		Passed 	 
 
*/
</code>
<cases>
<tl>
200
</tl>
<i>
7
all
is
beyond
the
edge
of
time
</i>
<o>
beyond
edge
time
all
the
is
of
</o>
<p>
20
</p>
<i>
7
space
is
a
legend
of
final
import
</i>
<o>
legend
import
space
final
is
of
a
</o>
<p>
20
</p>
<i>
1
x
</i>
<o>
x
</o>
<p>
20
</p>
<i>
4
j
j
j
jj
</i>
<o>
jj
j
j
j
</o>
<p>
20
</p>
<i>
5
and
now
our
feature
presentation
</i>
<o>
presentation
feature
and
now
our
</o>
<p>
20
</p>
</cases>
<examples>
<tl>
200
</tl>
<i>
6
Top
Coder
comp
Wedn
at
midnight
</i>
<o>
midnight
Coder
comp
Wedn
Top
at
</o>
<i>
3
one
two
three
</i>
<o>
three
one
two
</o>
</examples>
</g>
<g>
<pname>
200
</pname>
<ques>
Problem Statement:

	A deck of cards contains 52 cards. Each card has a suit ( Clubs , Diamonds, Hearts, Spades ) and each suit has the following : Ace, 2, 3, ..., 9, 10, Jack, Queen and King . In the game of bridge, a hand consists of 13 cards from the deck.A player needs to evaluate his hand, giving it a point value.
	The standard method is as follows: count 4 points for each Ace, 3 points for each King, 2 points for each Queen, and 1 point for each Jack. For each suit, count 1 point if the hand contains exactly two cards of that suit, 2 points if exactly one card, and 3 points if the hand contains no cards of that suit. The point value of the hand is the sum of all these points.
	The clubs are numbered 1 to 13, the diamonds are 14 to 26, the hearts are numbered 27 to 39, and the spades are numbered 40 to 52. Within each suit, the cards are numbered in the order Ace, 2, 3, ..., 9, 10, Jack, Queen, King. So, for example, the King of Hearts is numbered 39 and the Ace of Spades is numbered 40.
	The input to your program will be thirteen numbers representing the 13 cards in the hand.your program should output the point value of the hand. 

Constraints:

1) hand will contain exactly 13 elements, all distinct.
2) Each element of hand will have a value between 1 and 52 inclusive.

Time Limit: 200 ms

Examples:

(1) Input : 25 14 15 16 17 18 19 20 21 22 23 24 26
  
    Output: 19

    Explanation: This hand contains all diamonds, so it has one Ace, one King, one Queeen, and one Jack, and it contains no cards in three suits. So its point value is (4 + 3 + 2 + 1 + 3 + 3 ) + 3 = 19.

(2) Input : 2 3 4 15 18 28 29 30 41 42 43 16 17
	
    Output: 0

    Explanation: This hand contains only 2's, 3's, 4's and one 5. It has 3 or 4 cards in each suit.

<Source: www.topcoder.com >
</ques>
<code>
#include <string>
#include <vector>
#include <iostream>

using namespace std;

int main()
{
	vector<int> hand;
	int suit_count[4]={0,0,0,0};
	int ans=0;
	for(int i=0;i<13;i++)
	{
		int temp;
		cin>>temp;
		hand.push_back(temp);
		switch(temp%13)  // 1,14,27,52,51,50,49,48,47,46,45,44,41
		{
			case 1: ans+=4;break;
			case 0: ans+=3;break;
			case 12: ans+=2;break;
			case 11: ans+=1;break;
		}
		if(temp>=1 && temp<=13)
			suit_count[0]++;
		if(temp>=14 && temp<=26)
			suit_count[1]++;
		if(temp>=27 && temp<=39)
			suit_count[2]++;
		if(temp>=40 && temp<=52)
			suit_count[3]++;
	}
	for(int i=0;i<4;i++)
	{
		if(suit_count[i]==0) 
			ans+=3;
		else if(suit_count[i]==1) 
			ans+=2;
		else if(suit_count[i]==2) 
			ans+=1;
	}
	cout << ans;
	return 0;
}
</code>
<cases>
<tl>
200
</tl>
<i>
1 14 27 40 11 24 37 50 12 25 38 51 13
</i>
<o>
31
</o>
<p>
25
</p>
<i>
1 2 3 4 5 6 7 8 9 10 11 12 13
</i>
<o>
19
</o>
<p>
25
</p>
<i>
2 15 16 28 29 30 41 42 43 44 45 46 47
</i>
<o>
3
</o>
<p>
25
</p>
<i>
2 3 4 5 15 16 17 28 29 30 41 42 43
</i>
<o>
0
</o>
<p>
25
</p>
</cases>
<examples>
<tl>
200
</tl>
<i>
25 14 15 16 17 18 19 20 21 22 23 24 26
</i>
<o>
19
</o>
<i>
2 3 4 15 18 28 29 30 41 42 43 16 17
</i>
<o>
0
</o>
</examples>
</g>
