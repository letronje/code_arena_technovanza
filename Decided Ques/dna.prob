<ques>
Problem Statement :

	As a research assistant to the renowned forensic expert Professor X , you have to find out the complement of a strand of DNA.

	DNA is composed of the following four bases: adenine, guanine, thymine, and cytosine. Two strands of DNA are considered complements of each other if all of the following conditions are met:

-   they are of equal length
-   for each adenine  in the first strand, a  thymine  is located in the exact same position of the second strand
-   for each thymine  in the first strand, an adenine  is located in the exact same position of the second strand
-   for each guanine  in the first strand, a  cytosine is located in the exact same position of the second strand
-   for each cytosine in the first strand, a  guanine  is located in the exact same position of the second strand

The input will be a string of the form "name:strand" (quotes for clarity only) where name represents a person's name and strand represents his/hers strand of DNA.

In the strand string, A stands for adenine, T for thymine, C for cytosine and G for guanine.
	Your program should output the complement of that strand, as a string.

Note:
1) Do not output the name of the person
2) The name and strand string are separated by a colon (:)

Constraints:

1) The name string has length 1 to 20,inclusive.
2) The name will contain characters 'a' to 'z' and 'A' to 'Z'.
3) The strand string has length 1 to 50, inclusive.
4) The strand string contains only the characters 'A', 'T', 'C', and 'G'.

Time Limit: 200 msecs

Examples:

1) Input : Harshad:GAAACT
   Output: CTTTGA

2) Input : Manoj:ACCAAAAGCTGCAGTATGA
   Output: TGGTTTTCGACGTCATACT

3) Input : Einstein:TAGGTCTCACTTAGCTTTCGTCCCTATAGTATATAGCTCCCAACCATCCA
   Output: ATCCAGAGTGAATCGAAAGCAGGGATATCATATATCGAGGGTTGGTAGGT

<Source : www.topcoder.com >
</ques>
<code>
#include <iostream>
#include <string>
using namespace std;

int main()
{
    	char* s = new char[72];
    	cin>>s;
	int pos=0;
	while(s[pos]!=':')
	{
		pos++;
	}
   	 char* out = new char[strlen(s)-pos+1];
   	 int j=0;
   	 for(int i=pos+1;i<strlen(s);i++)
   	 {
       	  switch(s[i])
       	  {
             		 case 'A': out[j++]='T';break;
            	  	 case 'T': out[j++]='A';break;
            	 	 case 'G': out[j++]='C';break;
             		 case 'C': out[j++]='G';break;
        	 }
   	 }
  	 out[j]='\0';
	 delete s;
   	 cout<<out;
  	 return 0;
}
</code>
<cases>
<tl>
200
</tl>
<i>
ABCDEFGHIJKLMNOPQRST:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
</i>
<o>
TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT
</o>
<p>
10
</p>
<i>
Boyle:TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT
</i>
<o>
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
</o>
<p>
10
</p>
<i>
APJKalam:CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
</i>
<o>
GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
</o>
<p>
10
</p>
<i>
Manmohan:GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
</i>
<o>
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
</o>
<p>
10
</p>
<i>
Clinton:ATCGATCGATCGATCGATCGATCGAATCGATCGATCGATCGATCGATCGA
</i>
<o>
TAGCTAGCTAGCTAGCTAGCTAGCTTAGCTAGCTAGCTAGCTAGCTAGCT
</o>
<p>
10
</p>
<i>
Saddam:A
</i>
<o>
T
</o>
<p>
10
</p>
<i>
Bush:T
</i>
<o>
A
</o>
<p>
10
</p>
<i>
BushSr:C
</i>
<o>
G
</o>
<p>
10
</p>
<i>
D:G
</i>
<o>
C
</o>
<p>
10
</p>
<i>
XXX:TGACATCGATGCATCGATCGATCGATCGATCGATCGATCGATC
</i>
<o>
ACTGTAGCTACGTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAG
</o>
<p>
10
</p>
</cases>
<examples>
<tl>
200
</tl>
<i>
Harshad:GAAACT
</i>
<o>
CTTTGA
</o>
<i>
Manoj:ACCAAAAGCTGCAGTATGA
</i>
<o>
TGGTTTTCGACGTCATACT
</o>
<i>
Einstein:TAGGTCTCACTTAGCTTTCGTCCCTATAGTATATAGCTCCCAACCATCCA
</i>
<o>
ATCCAGAGTGAATCGAAAGCAGGGATATCATATATCGAGGGTTGGTAGGT
</o>
</examples>
