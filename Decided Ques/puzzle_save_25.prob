<ques>
Problem Statement:

	The goal of this problem is to write a program that solves a square jigsaw puzzle by fitting together the scattered puzzle pieces. You have to arrange these pieces, if possible, to form the original puzzle. 
	The pieces cannot be rotated or flipped from their original orientation. There may be more than one possible solution for a set of pieces. 
	The first line of the input is the number of pieces 'p' in the puzzle followed by the size 's' of the square puzzle. Each piece is then specified by listing a single line with two integers, the number of rows and columns in the piece, followed by one or more lines which specify the shape of the piece.
	The shape specification consists of the characters `0' and `1'. A `1' indicates the solid shape of the puzzle and a `0' indicates empty space. The pieces should be numbered by the order they are encountered in the input. That is, the first piece in a puzzle is piece 1, the next is piece 2, etc. All pieces may be assumed to be valid.
	If there is only one possible way of arranging the pieces to form the  square puzzle, then the completed puzzle must be displayed in the form of an 'n' row by 'n' column square by using all the 'p' pieces exactly once. In order to distinguish the pieces from one another, the solid portions of piece 1 should be replaced with the character `1', of piece 2 with character `2' and so on, etc. 
	If there are more than one possible ways of arranging the pieces to form the square puzzle, then output only the no of such possible ways. 
	For puzzles which have no possible solution, simply output "Impossible". 

Constraints:

1> No piece will be smaller than 1 row by 1 column and larger than 10 rows by 10 columns. 
2> The size of the square puzzle will be atmost 10
2> There will be at least 1 and at most 9 pieces. 

Time Limit: 1000 ms.

Examples:

(1)

Input:
2
3
2 3
111
101
2 3
010
111

Output:
111
121
222

Explanation:
There are two pieces:
a) 111 (2 rows, 3 cols) 
    101
b) 010 (2 rows, 3 cols)
    111		  	    
Here, the 2nd piece can be fitted to bottom part of the 1st piece. In order to display the output, the 1s in the 2nd piece are replaced by 2.

Therefore we get the above mentioned output.

(2)

Input:
3
5
5 5
11111
11101
10001
11101
11111
1 2
11
3 1
1
1
1

Output:
11111
11131
12231
11131
11111

As you can see, pieces can have a hole (of any shape) inside in which other pieces can be fitted.

(3)

Input:
4
2
1 1 
1
1 1
1
1 1
1
1 1
1

Output:
24

Explanation: Each 1 by 1 piece can occupy any of the 4 empty places.
 .'. Number of possibilities = 4! = 24

<Source: ACM >
</ques>
<code>
#include <iostream>
#include <vector>

#define EMPTY '0'
#define SOLID '1'

using namespace std ;

// a piece can be placed on a board in many possible ways(,i.e,horiz_possibs*vert_possibs)
// in each way , corner represents (row,col) of top,left corner of piece
// scoords => vector of all such corners. (when a piece is placed 
//                                 in each of its possible positions one by one)
typedef pair<int,int> corner ;
typedef vector<corner> corners ; 

typedef vector<string> piece ; //each row=string
typedef vector<string> board ;

vector < piece > pieces ;
vector < corners > pieces_corners ;
vector < board > solns ;

int sqr_size;//size of square (to makes things tough 
						//we can ask them to calc size of square through code)

void GetPieces(const int& no_pieces)
{
	for(int i=0;i<no_pieces;i++)
	{
		int no_rows,no_cols ;
		cin>>no_rows>>no_cols ;
		piece p ;
		for(int j=0;j<no_rows;j++)
		{
			string s;
			cin>>s;
			p.push_back(s);
		}
		pieces.push_back(p);
	}
}

corners CalcPlacements(const int& pindex )//return corners of piece with index 'pindex'
{
	int horiz_possibs = sqr_size-pieces.at(pindex).size()+1;
	int vert_possibs = sqr_size-pieces.at(pindex).at(0).size()+1;//.at(0,1,..any) is ok

	corners starts ; 

	for(int i=0;i<horiz_possibs;i++)
	{
		for(int j=0;j<vert_possibs;j++)
		{
			corner c;
			c.first=i;
			c.second=j;
			starts.push_back(c);		
		}
	}
	return starts ;
}

//returns false if piece at pindex cannot be placed on the board without overlapping.
//return true if otherwise & also changes the board accordingly
bool Place(board& b,const int& pindex,const corner& start)
{
	char piece_char = pindex+49 ;//1st board's char ='1',2nd board's char ='2',...
	board tempb =b;//backup
	piece p = pieces.at(pindex);
	int prows = p.size();//no of rows occupied by piece
	int pcols = p.at(0).length();//no of cols occupied by piece
	for( int i=start.first;i<start.first+prows;i++)
	{
		for(int j=start.second;j<start.second+pcols;j++)
		{
			char c = p.at(i-start.first).at(j-start.second) ;
			if(tempb.at(i).at(j)==SOLID && c ==SOLID)//if there is overlapping
				return false;
			else if(c == SOLID)//if ( no overlapping & if pos is SOLID )
				tempb.at(i).at(j)= piece_char ;//as mentioned in problem
											   //to distinguish between diff pieces in 
											   // final soln.	
		}
	}
	b=tempb;//apply changes if placement successfull
	return true ;
}
void ShowBoard(const board& b)
{
	for(int i=0;i<sqr_size;i++)
		cout << b.at(i) << endl ;
	cout << endl ;
}
bool IsCompletelyFilledSquare(const board& b)//is Board completely solid
{
	for(int i=0;i<b.size();i++)
		if(b.at(i).find(EMPTY)!=-1)
			return false;
	return true ;	
}
void Solve(board& b,const int& pindex )//backtracking solver(solves piece by piece0
{
	if(pindex==pieces.size())//if all pieces have been used
	{
		if(IsCompletelyFilledSquare(b))
		{
			//ShowBoard(b);
			solns.push_back(b);
		}	
		return ;
	}
	board backup=b;
	corners s = pieces_corners.at(pindex);
	for(int i=0;i<s.size();i++)
	{
		if(Place(b,pindex,s.at(i)))//if placement was successful
			Solve(b,pindex+1);
		b=backup ;//always apply backup to find all solns
	}
}
int main ()
{
	int no_pieces ;
	cin>>no_pieces>>sqr_size ;
	GetPieces(no_pieces);
	pieces_corners.clear();
	for(int i=0;i<no_pieces;i++)
		pieces_corners.push_back(CalcPlacements(i));
	board b;
	string zeroes(sqr_size,'0');
	
	for(int i=0;i<sqr_size;i++)
		b.push_back(zeroes);
	solns.clear();
	Solve(b,0);
	if(solns.size()==0)
	{	
		cout << "Impossible";
		return 0;
	}
	else if(solns.size() ==1)
	{
		ShowBoard(solns.at(0));
		return 0;
	}	
	else if(solns.size() > 1 )
	{
		cout << solns.size();
		return 0;
	}	
	return 0;
}
</code>
<cases>
<tl>
1000
</tl>
<i>
2 10
10 10
1111111111
0000000001
1111111101
1000000101
1011110101
1010010101
1010000101
1011111101
1000000001
1111111111
8 9
111111111
000000001
011111101
010000101
010110101
010111101
010000001
011111111
</i>
<o>
1111111111
2222222221
1111111121
1222222121
1211112121
1212212121
1212222121
1211111121
1222222221
1111111111
</o>
<p>
16
</p>
<i>
4 4
2 2
11
10
4 2
11
11
01
11
1 1
1
3 3
010
111
010
</i>
<o>
1122
1422
4442
3422
</o>
<p>
16
</p>
<i>
3 5
5 5
11111
10001
10001
10001
11111
3 3
111
101
111
1 1
1
</i>
<o>
11111
12221
12321
12221
11111
</o>
<p>
16
</p>
<i>
3 3
2 3
111
010
2 2
10
11
2 1
1
1
</i>
<o>
111
213
223
</o>
<p>
16
</p>
<i>
5 5
2 1
1
1
2 3
111
010
5 2
01
01
01
01
11
2 2
10
11
4 4
0101
1111
0111
0010
</i>
<o>
12223
15253
55553
45553
44533
</o>
<p>
16
</p>
<i>
5 7
7 3
110
110
110
111
110
110
110
7 3
011
011
011
111
011
011
011
2 3
111
010
2 3
010
111
5 3
101
111
010
111
101
</i>
<o>
1133322
1153522
1155522
1115222
1155522
1154522
1144422
</o>
<p>
20
</p>
</cases>
<examples>
<tl>
1000
</tl>
<i>
2
3
2 3
111
101
2 3
010
111
</i>
<o>
111
121
222
</o>
<i>
3
5
5 5
11111
11101
10001
11101
11111
1 2
11
3 1
1
1
1
</i>
<o>
11111
11131
12231
11131
11111
</o>
<i>
4
2
1 1 
1
1 1
1
1 1
1
1 1
1
</i>
<o>
24
</o>
</examples>
