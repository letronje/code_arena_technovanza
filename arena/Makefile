#############################################################################
# Makefile for building: arena
# Generated by qmake (1.04a) (Qt 3.1.1) on: Tue Aug 23 16:08:35 2005
# Project:  arena.pro
# Template: app
# Command: $(QMAKE) -o Makefile arena.pro
#############################################################################

####### Compiler, tools and options

CC       = gcc
CXX      = g++
LEX      = flex
YACC     = yacc
CFLAGS   = -pipe -Wall -W -O2 -march=i386 -mcpu=i686 -g -DGLX_GLXEXT_LEGACY -fno-use-cxa-atexit -fno-exceptions  -DQT_NO_DEBUG
CXXFLAGS = -pipe -Wall -W -O2 -march=i386 -mcpu=i686 -g -DGLX_GLXEXT_LEGACY -fno-use-cxa-atexit -fno-exceptions  -DQT_NO_DEBUG
LEXFLAGS = 
YACCFLAGS= -d
INCPATH  = -I$(QTDIR)/mkspecs/default -I. -I$(QTDIR)/include -I.ui/ -I.moc/
LINK     = g++
LFLAGS   = 
LIBS     = $(SUBLIBS) -L$(QTDIR)/lib -L/usr/X11R6/lib -lqt-mt -lXext -lX11 -lm
AR       = ar cqs
RANLIB   = 
MOC      = $(QTDIR)/bin/moc
UIC      = $(QTDIR)/bin/uic
QMAKE    = qmake
TAR      = tar -cf
GZIP     = gzip -9f
COPY     = cp -f
COPY_FILE= $(COPY) -p
COPY_DIR = $(COPY) -pR
DEL_FILE = rm -f
SYMLINK  = ln -sf
DEL_DIR  = rmdir
MOVE     = mv -f
CHK_DIR_EXISTS= test -d
MKDIR    = mkdir -p

####### Output directory

OBJECTS_DIR = .obj/

####### Files

HEADERS = highlighter.h \
		common.h \
		decl.h
SOURCES = main.cpp
OBJECTS = .obj/main.o \
		.obj/ide.o \
		.obj/welcome.o \
		.obj/rules.o \
		.obj/reg.o \
		.obj/score.o \
		.obj/result.o \
		.obj/test.o \
		.obj/options.o \
		.obj/qmake_image_collection.o
FORMS = ide.ui \
		welcome.ui \
		rules.ui \
		reg.ui \
		score.ui \
		result.ui \
		test.ui \
		options.ui
UICDECLS = .ui/ide.h \
		.ui/welcome.h \
		.ui/rules.h \
		.ui/reg.h \
		.ui/score.h \
		.ui/result.h \
		.ui/test.h \
		.ui/options.h
UICIMPLS = .ui/ide.cpp \
		.ui/welcome.cpp \
		.ui/rules.cpp \
		.ui/reg.cpp \
		.ui/score.cpp \
		.ui/result.cpp \
		.ui/test.cpp \
		.ui/options.cpp
SRCMOC   = .moc/moc_ide.cpp \
		.moc/moc_welcome.cpp \
		.moc/moc_rules.cpp \
		.moc/moc_reg.cpp \
		.moc/moc_score.cpp \
		.moc/moc_result.cpp \
		.moc/moc_test.cpp \
		.moc/moc_options.cpp
OBJMOC = .obj/moc_ide.o \
		.obj/moc_welcome.o \
		.obj/moc_rules.o \
		.obj/moc_reg.o \
		.obj/moc_score.o \
		.obj/moc_result.o \
		.obj/moc_test.o \
		.obj/moc_options.o
DIST	   = arena.pro
QMAKE_TARGET = arena
DESTDIR  = 
TARGET   = arena

first: all
####### Implicit rules

.SUFFIXES: .c .cpp .cc .cxx .C

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o $@ $<

####### Build rules

all: Makefile $(TARGET)

$(TARGET): $(UICDECLS) $(OBJECTS) $(OBJMOC) 
	$(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(OBJMOC) $(LIBS)

mocables: $(SRCMOC)

$(MOC): 
	( cd $(QTDIR)/src/moc ; $(MAKE) )

Makefile: arena.pro  $(QTDIR)/mkspecs/default/qmake.conf 
	$(QMAKE) -o Makefile arena.pro
qmake: 
	@$(QMAKE) -o Makefile arena.pro

dist: 
	@mkdir -p .obj/arena && $(COPY_FILE) --parents $(SOURCES) $(HEADERS) $(FORMS) $(DIST) .obj/arena/ && $(COPY_FILE) --parents ide.ui.h welcome.ui.h rules.ui.h reg.ui.h score.ui.h result.ui.h test.ui.h options.ui.h .obj/arena/ && ( cd `dirname .obj/arena` && $(TAR) arena.tar arena && $(GZIP) arena.tar ) && $(MOVE) `dirname .obj/arena`/arena.tar.gz . && $(DEL_FILE) -r .obj/arena

mocclean:
	-$(DEL_FILE) $(OBJMOC)
	-$(DEL_FILE) $(SRCMOC)

uiclean:
	-$(DEL_FILE) $(UICIMPLS) $(UICDECLS)

yaccclean:
lexclean:
clean: mocclean uiclean
	-$(DEL_FILE) $(OBJECTS) 
		-$(DEL_FILE) .ui/qmake_image_collection.cpp
	-$(DEL_FILE) *~ core *.core


####### Sub-libraries

distclean: clean
	-$(DEL_FILE) $(TARGET) $(TARGET)


FORCE:

####### Compile

.obj/main.o: main.cpp common.h \
		.ui/welcome.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/main.o main.cpp

.ui/ide.h: ide.ui 
	$(UIC) ide.ui -o .ui/ide.h

.ui/ide.cpp: .ui/ide.h ide.ui 
	$(UIC) ide.ui -i ide.h -o .ui/ide.cpp

.ui/welcome.h: welcome.ui 
	$(UIC) welcome.ui -o .ui/welcome.h

.ui/welcome.cpp: .ui/welcome.h welcome.ui 
	$(UIC) welcome.ui -i welcome.h -o .ui/welcome.cpp

.ui/rules.h: rules.ui 
	$(UIC) rules.ui -o .ui/rules.h

.ui/rules.cpp: .ui/rules.h rules.ui 
	$(UIC) rules.ui -i rules.h -o .ui/rules.cpp

.ui/reg.h: reg.ui 
	$(UIC) reg.ui -o .ui/reg.h

.ui/reg.cpp: .ui/reg.h reg.ui 
	$(UIC) reg.ui -i reg.h -o .ui/reg.cpp

.ui/score.h: score.ui 
	$(UIC) score.ui -o .ui/score.h

.ui/score.cpp: .ui/score.h score.ui 
	$(UIC) score.ui -i score.h -o .ui/score.cpp

.ui/result.h: result.ui 
	$(UIC) result.ui -o .ui/result.h

.ui/result.cpp: .ui/result.h result.ui 
	$(UIC) result.ui -i result.h -o .ui/result.cpp

.ui/test.h: test.ui 
	$(UIC) test.ui -o .ui/test.h

.ui/test.cpp: .ui/test.h test.ui 
	$(UIC) test.ui -i test.h -o .ui/test.cpp

.ui/options.h: options.ui 
	$(UIC) options.ui -o .ui/options.h

.ui/options.cpp: .ui/options.h options.ui 
	$(UIC) options.ui -i options.h -o .ui/options.cpp

.obj/ide.o: .ui/ide.cpp ide.ui.h \
		.ui/ide.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/ide.o .ui/ide.cpp

.obj/welcome.o: .ui/welcome.cpp welcome.ui.h \
		.ui/welcome.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/welcome.o .ui/welcome.cpp

.obj/rules.o: .ui/rules.cpp rules.ui.h \
		.ui/rules.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/rules.o .ui/rules.cpp

.obj/reg.o: .ui/reg.cpp reg.ui.h \
		.ui/reg.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/reg.o .ui/reg.cpp

.obj/score.o: .ui/score.cpp score.ui.h \
		.ui/score.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/score.o .ui/score.cpp

.obj/result.o: .ui/result.cpp result.ui.h \
		.ui/result.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/result.o .ui/result.cpp

.obj/test.o: .ui/test.cpp test.ui.h \
		.ui/test.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/test.o .ui/test.cpp

.obj/options.o: .ui/options.cpp options.ui.h \
		.ui/options.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/options.o .ui/options.cpp

.obj/moc_ide.o: .moc/moc_ide.cpp .ui/ide.h 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/moc_ide.o .moc/moc_ide.cpp

.obj/moc_welcome.o: .moc/moc_welcome.cpp .ui/welcome.h 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/moc_welcome.o .moc/moc_welcome.cpp

.obj/moc_rules.o: .moc/moc_rules.cpp .ui/rules.h 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/moc_rules.o .moc/moc_rules.cpp

.obj/moc_reg.o: .moc/moc_reg.cpp .ui/reg.h 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/moc_reg.o .moc/moc_reg.cpp

.obj/moc_score.o: .moc/moc_score.cpp .ui/score.h 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/moc_score.o .moc/moc_score.cpp

.obj/moc_result.o: .moc/moc_result.cpp .ui/result.h 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/moc_result.o .moc/moc_result.cpp

.obj/moc_test.o: .moc/moc_test.cpp .ui/test.h 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/moc_test.o .moc/moc_test.cpp

.obj/moc_options.o: .moc/moc_options.cpp .ui/options.h 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/moc_options.o .moc/moc_options.cpp

.moc/moc_ide.cpp: $(MOC) .ui/ide.h
	$(MOC) .ui/ide.h -o .moc/moc_ide.cpp

.moc/moc_welcome.cpp: $(MOC) .ui/welcome.h
	$(MOC) .ui/welcome.h -o .moc/moc_welcome.cpp

.moc/moc_rules.cpp: $(MOC) .ui/rules.h
	$(MOC) .ui/rules.h -o .moc/moc_rules.cpp

.moc/moc_reg.cpp: $(MOC) .ui/reg.h
	$(MOC) .ui/reg.h -o .moc/moc_reg.cpp

.moc/moc_score.cpp: $(MOC) .ui/score.h
	$(MOC) .ui/score.h -o .moc/moc_score.cpp

.moc/moc_result.cpp: $(MOC) .ui/result.h
	$(MOC) .ui/result.h -o .moc/moc_result.cpp

.moc/moc_test.cpp: $(MOC) .ui/test.h
	$(MOC) .ui/test.h -o .moc/moc_test.cpp

.moc/moc_options.cpp: $(MOC) .ui/options.h
	$(MOC) .ui/options.h -o .moc/moc_options.cpp

.obj/qmake_image_collection.o: .ui/qmake_image_collection.cpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/qmake_image_collection.o .ui/qmake_image_collection.cpp

.ui/qmake_image_collection.cpp: images/gnome-gemvt.png \
		images/procman.png
	$(UIC)  -embed arena images/gnome-gemvt.png images/procman.png -o .ui/qmake_image_collection.cpp

####### Install

install: all 

uninstall: 

